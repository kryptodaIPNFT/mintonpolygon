{"version":3,"sources":["hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractExistsAtAddress.js","hooks/ContractLoader.js","hooks/ContractReader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/EventListener.js","index.jsx","contracts/external_contracts.js"],"names":["useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","address","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","useContractExistsAtAddress","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","utils","isAddress","getCode","bytecode","ethers","require","useContractLoader","providerOrSigner","config","contracts","setContracts","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","Object","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","keys","reduce","accumulator","contractName","_address","customAddresses","includes","Contract","abi","loadContracts","useContractReader","functionName","formatter","onChange","adjustPollTime","value","setValue","tried","setTried","setTimeout","bind","updateValue","newValue","lookupAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify","useUserSigner","injectedProvider","localProvider","setSigner","burnerSigner","key","storedValue","setStoredValue","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useBurnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","reason","Blockie","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","signerAddress","setSignerAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","inputs","map","input","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","innerIndex","baseType","stateMutability","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","aria-label","contract","customContract","account","show","displayedContractFunctions","values","interface","functions","filter","contractDisplay","isQueryable","Faucet","faucetAddress","setFaucetAddress","_faucetAddress","getFaucetAddress","blockie","setAddress","icon","GasGauge","parseInt","Header","subTitle","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","BufferList","ipfs","ipfsAPI","host","port","protocol","targetNetwork","STARTING_JSON","external_url","image","attributes","trait_type","getFromIPFS","hashToGet","get","file","path","content","chunk","append","scaffoldEthProvider","providers","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","infuraId","clearCachedProvider","App","_network","setInjectedProvider","setPrice","DAI","Token","Fetcher","fetchPairData","WETH","pair","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","response","newGasPrice","catch","useGasPrice","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","mainnetContracts","_lastBlockNumber","myMainnetDAIBalance","transferEvents","eventName","startBlock","updates","setUpdates","resetEventsBlock","messages","pop","removeListener","useEventListener","yourBalance","yourCollectibles","setYourCollectibles","collectibleUpdate","tokenIndex","YourCollectible","tokenOfOwnerByIndex","tokenId","tokenURI","ipfsHash","jsonManifestBuffer","jsonManifest","toString","uri","owner","updateYourCollectibles","networkDisplay","networkSelected","networkLocal","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","Web3Provider","code","setRoute","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","yourJSON","setYourJSON","sending","setSending","setIpfsHash","ipfsDownHash","setIpfsDownHash","setDownloading","ipfsContent","setIpfsContent","transferToAddresses","setTransferToAddresses","selectedKeys","Item","exact","paddingBottom","dataSource","renderItem","item","src","maxWidth","update","transferFrom","paddingTop","enableClipboard","onEdit","edit","updated_src","onAdd","add","onDelete","del","placeHolder","align","gutter","prevTheme","subgraphUri","client","ApolloClient","InMemoryCache","ReactDOM","render","themeMap","defaultTheme","document","getElementById","module","exports","1","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.f5941afc.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\n// helper hook to call a function regularly in time intervals\r\nconst DEBUG = false;\r\n\r\nexport default function useOnBlock(provider, fn, args) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n\r\n  // Turn on the listener if we have a function & a provider\r\n  useEffect(() => {\r\n    if (fn && provider) {\r\n      const listener = blockNumber => {\r\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\r\n\r\n        if (args && args.length > 0) {\r\n          savedCallback.current(...args);\r\n        } else {\r\n          savedCallback.current();\r\n        }\r\n      };\r\n\r\n      provider.on(\"block\", listener);\r\n\r\n      return () => {\r\n        provider.off(\"block\", listener);\r\n      };\r\n    }\r\n  }, [provider]);\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n// helper hook to call a function regularly in time intervals\r\n\r\nexport default function usePoller(fn, delay, extraWatch) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n  // Set up the interval.\r\n  // eslint-disable-next-line consistent-return\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n  // run at start too\r\n  useEffect(() => {\r\n    fn();\r\n  }, [extraWatch]);\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport useOnBlock from \"./OnBlock\";\r\nimport usePoller from \"./Poller\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets your balance in ETH from given address and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address and get balance corresponding to given address\r\n  - Change provider to access balance on different chains (ex. mainnetProvider)\r\n  - If no pollTime is passed, the balance will update on every new block\r\n*/\r\n\r\nconst DEBUG = false;\r\n\r\nexport default function useBalance(provider, address, pollTime = 0) {\r\n  const [balance, setBalance] = useState();\r\n\r\n  const pollBalance = useCallback(\r\n    async (provider, address) => {\r\n      if (provider && address) {\r\n        const newBalance = await provider.getBalance(address);\r\n        if (newBalance !== balance) {\r\n          setBalance(newBalance);\r\n        }\r\n      }\r\n    },\r\n    [provider, address],\r\n  );\r\n\r\n  // Only pass a provider to watch on a block if there is no pollTime\r\n  useOnBlock(pollTime === 0 && provider, () => {\r\n    if (provider && address && pollTime === 0) {\r\n      pollBalance(provider, address);\r\n    }\r\n  });\r\n\r\n  // Use a poller if a pollTime is provided\r\n  usePoller(\r\n    async () => {\r\n      if (provider && address && pollTime > 0) {\r\n        if (DEBUG) console.log(\"polling!\", address);\r\n        pollBalance();\r\n      }\r\n    },\r\n    pollTime,\r\n    provider && address,\r\n  );\r\n\r\n  return balance;\r\n}\r\n","import { utils } from \"ethers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\r\n\r\n  ~ How can I use? ~\r\n\r\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide contractAddress to check if the contract is deployed\r\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\r\n*/\r\n\r\nconst useContractExistsAtAddress = (provider, contractAddress) => {\r\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\r\n\r\n  // We can look at the blockchain and see what's stored at `contractAddress`\r\n  // If we find code then we know that a contract exists there.\r\n  // If we find nothing (0x0) then there is no contract deployed to that address\r\n  useEffect(() => {\r\n    // eslint-disable-next-line consistent-return\r\n    const checkDeployment = async () => {\r\n      if (!utils.isAddress(contractAddress)) return false;\r\n      const bytecode = await provider.getCode(contractAddress);\r\n      setContractIsDeployed(bytecode !== \"0x0\");\r\n    };\r\n    if (provider) checkDeployment();\r\n  }, [provider, contractAddress]);\r\n\r\n  return contractIsDeployed;\r\n};\r\n\r\nexport default useContractExistsAtAddress;\r\n","/* eslint-disable import/no-dynamic-require */\r\n/* eslint-disable global-require */\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Loads your local contracts and gives options to read values from contracts\r\n  or write transactions into them\r\n\r\n  ~ How can I use? ~\r\n\r\n  const readContracts = useContractLoader(localProvider) // or\r\n  const writeContracts = useContractLoader(userProvider)\r\n\r\n  ~ Features ~\r\n\r\n  - localProvider enables reading values from contracts\r\n  - userProvider enables writing transactions into contracts\r\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\r\n    and using ContractReader.js hook:\r\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\r\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\r\n\r\n  config can include:\r\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\r\n  - hardhatNetworkName - to hardcode the hardhat network of interest\r\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\r\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\r\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\r\n*/\r\n\r\nexport default function useContractLoader(providerOrSigner, config = {}) {\r\n  const [contracts, setContracts] = useState();\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    async function loadContracts() {\r\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\r\n        console.log(`loading contracts`);\r\n        try {\r\n          // we need to check to see if this providerOrSigner has a signer or not\r\n          let signer;\r\n          let provider;\r\n          let accounts;\r\n\r\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\r\n            accounts = await providerOrSigner.listAccounts();\r\n          }\r\n\r\n          if (ethers.Signer.isSigner(providerOrSigner)) {\r\n            signer = providerOrSigner;\r\n            provider = signer.provider;\r\n          } else if (accounts && accounts.length > 0) {\r\n            signer = providerOrSigner.getSigner();\r\n            provider = providerOrSigner;\r\n          } else {\r\n            signer = providerOrSigner;\r\n            provider = providerOrSigner;\r\n          }\r\n\r\n          const providerNetwork = await provider.getNetwork();\r\n\r\n          const _chainId = config.chainId || providerNetwork.chainId;\r\n\r\n          let contractList = {};\r\n          let externalContractList = {};\r\n          try {\r\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n          try {\r\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n\r\n          let combinedContracts = {};\r\n\r\n          if (contractList[_chainId]) {\r\n            for (const hardhatNetwork in contractList[_chainId]) {\r\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\r\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\r\n                  combinedContracts = {\r\n                    ...combinedContracts,\r\n                    ...contractList[_chainId][hardhatNetwork].contracts,\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (externalContractList[_chainId]) {\r\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\r\n          }\r\n\r\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\r\n            const _address =\r\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\r\n                ? config.customAddresses[contractName]\r\n                : combinedContracts[contractName].address;\r\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\r\n            return accumulator;\r\n          }, {});\r\n          if (active) setContracts(newContracts);\r\n        } catch (e) {\r\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\r\n        }\r\n      }\r\n    }\r\n    loadContracts();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName]);\r\n\r\n  return contracts;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport useOnBlock from \"./OnBlock\";\r\nimport usePoller from \"./Poller\";\r\n\r\nconst DEBUG = false;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to read values from contracts and keep track of them in the local React states\r\n\r\n  ~ How can I use? ~\r\n\r\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n\r\n  ~ Features ~\r\n\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\r\n  - Pass an args array if the function requires\r\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\r\n*/\r\n\r\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\r\n  let adjustPollTime = 0;\r\n  if (pollTime) {\r\n    adjustPollTime = pollTime;\r\n  } else if (!pollTime && typeof args === \"number\") {\r\n    // it's okay to pass poll time as last argument without args for the call\r\n    adjustPollTime = args;\r\n  }\r\n\r\n  const [value, setValue] = useState();\r\n  const [tried, setTried] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (typeof onChange === \"function\") {\r\n      setTimeout(onChange.bind(this, value), 1);\r\n    }\r\n  }, [value, onChange]);\r\n\r\n  const updateValue = async () => {\r\n    try {\r\n      let newValue;\r\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\r\n      if (args && args.length > 0) {\r\n        newValue = await contracts[contractName][functionName](...args);\r\n        setTried(true);\r\n        if (DEBUG)\r\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\r\n      } else {\r\n        newValue = await contracts[contractName][functionName]();\r\n      }\r\n      if (formatter && typeof formatter === \"function\") {\r\n        newValue = formatter(newValue);\r\n      }\r\n      // console.log(\"GOT VALUE\",newValue)\r\n      if (newValue !== value) {\r\n        setValue(newValue);\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\r\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\r\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\r\n      updateValue();\r\n    }\r\n  });\r\n\r\n  // Use a poller if a pollTime is provided\r\n  usePoller(\r\n    async () => {\r\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\r\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\r\n        updateValue();\r\n      }\r\n    },\r\n    adjustPollTime,\r\n    contracts && contracts[contractName],\r\n  );\r\n\r\n  if (tried === false && contracts && contracts[contractName]) {\r\n    updateValue();\r\n  }\r\n\r\n  return value;\r\n}\r\n","import { utils } from \"ethers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n// resolved if(name){} to not save \"\" into cache\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets ENS name from given address and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const ensName = useLookupAddress(mainnetProvider, address);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address and get ENS name corresponding to given address\r\n*/\r\n\r\nconst lookupAddress = async (provider, address) => {\r\n  if (address && utils.isAddress(address)) {\r\n    // console.log(`looking up ${address}`)\r\n    try {\r\n      // Accuracy of reverse resolution is not enforced.\r\n      // We then manually ensure that the reported ens name resolves to address\r\n      const reportedName = await provider.lookupAddress(address);\r\n\r\n      const resolvedAddress = await provider.resolveName(reportedName);\r\n\r\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\r\n        return reportedName;\r\n      }\r\n      return utils.getAddress(address);\r\n    } catch (e) {\r\n      return utils.getAddress(address);\r\n    }\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst useLookupAddress = (provider, address) => {\r\n  const [ensName, setEnsName] = useState(address);\r\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\r\n\r\n  useEffect(() => {\r\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\r\n    cache = cache && JSON.parse(cache);\r\n\r\n    if (cache && cache.timestamp > Date.now()) {\r\n      setEnsName(cache.name);\r\n    } else if (provider) {\r\n      lookupAddress(provider, address).then(name => {\r\n        if (name) {\r\n          setEnsName(name);\r\n          window.localStorage.setItem(\r\n            \"ensCache_\" + address,\r\n            JSON.stringify({\r\n              timestamp: Date.now() + 360000,\r\n              name,\r\n            }),\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }, [provider, address, setEnsName]);\r\n\r\n  return ensName;\r\n};\r\n\r\nexport default useLookupAddress;\r\n","import { constants } from \"ethers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets address from given ENS name and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n\r\n  ~ Features ~\r\n\r\n  - Specify mainnetProvider\r\n  - Provide ENS name and get address corresponding to given ENS name\r\n*/\r\n\r\nconst useResolveName = (provider, ensName) => {\r\n  const [address, setAddress] = useState(constants.AddressZero);\r\n\r\n  useEffect(() => {\r\n    if (provider) {\r\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\r\n    }\r\n  }, [provider, ensName]);\r\n\r\n  return address;\r\n};\r\n\r\nexport default useResolveName;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\nexport default function useBurnerSigner(provider) {\r\n  const key = \"metaPrivateKey\";\r\n  let wallet;\r\n  const [signer, setSigner] = useState();\r\n  const [storedValue, setStoredValue] = useState();\r\n\r\n  const setValue = value => {\r\n    try {\r\n      setStoredValue(value);\r\n      window.localStorage.setItem(key, value);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedKey = window.localStorage.getItem(key);\r\n    if (!storedKey) {\r\n      console.log(\"generating a new key\");\r\n      const _newWallet = ethers.Wallet.createRandom();\r\n      const _newKey = _newWallet.privateKey;\r\n      setValue(_newKey);\r\n    } else {\r\n      setValue(storedKey);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (storedValue && provider) {\r\n      wallet = new ethers.Wallet(storedValue);\r\n      const _signer = wallet.connect(provider);\r\n      setSigner(_signer);\r\n    }\r\n  }, [storedValue, provider]);\r\n\r\n  return signer;\r\n}\r\n","import { useMemo, useState } from \"react\";\r\nimport useBurnerSigner from \"./BurnerSigner\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets user provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const userProvider = useUserProvider(injectedProvider, localProvider);\r\n\r\n  ~ Features ~\r\n\r\n  - Specify the injected provider from Metamask\r\n  - Specify the local provider\r\n  - Usage examples:\r\n    const tx = Transactor(userSigner, gasPrice)\r\n*/\r\n\r\nconst useUserSigner = (injectedProvider, localProvider) => {\r\n  const [signer, setSigner] = useState();\r\n  const burnerSigner = useBurnerSigner(localProvider);\r\n\r\n  useMemo(() => {\r\n    if (injectedProvider) {\r\n      console.log(\"🦊 Using injected provider\");\r\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\r\n      setSigner(injectedSigner);\r\n    } else if (!localProvider) setSigner();\r\n    else {\r\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\r\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\r\n        let rawPK;\r\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\r\n          console.log(\"🔑 Incoming Private Key...\");\r\n          rawPK = incomingPK;\r\n          window.history.pushState({}, \"\", \"/\");\r\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\r\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n          }\r\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\r\n        }\r\n      }\r\n\r\n      console.log(\"🔥 Using burner signer\", burnerSigner);\r\n      setSigner(burnerSigner);\r\n    }\r\n  }, [injectedProvider, localProvider, burnerSigner]);\r\n\r\n  return signer;\r\n};\r\n\r\nexport default useUserSigner;\r\n","import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport { useLookupAddress } from \"../hooks\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) =>\r\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\r\n\r\nexport default function Address(props) {\r\n  const address = props.value || props.address;\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let displayAddress = address.substr(0, 6);\r\n\r\n  if (ens && ens.indexOf(\"0x\") < 0) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let text;\r\n  if (props.onChange) {\r\n    text = (\r\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  } else {\r\n    text = (\r\n      <Text copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {text}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"../hooks\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // const [listening, setListening] = useState(false);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n  if (typeof props.value !== \"undefined\") {\r\n    usingBalance = props.value;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier;\r\n\r\n  if (price && dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  kovan: {\r\n    name: \"kovan\",\r\n    color: \"#7003DD\",\r\n    chainId: 42,\r\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://kovan.etherscan.io/\",\r\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\r\n  },\r\n  rinkeby: {\r\n    name: \"rinkeby\",\r\n    color: \"#e0d068\",\r\n    chainId: 4,\r\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\r\n    faucet: \"https://faucet.rinkeby.io/\",\r\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  ropsten: {\r\n    name: \"ropsten\",\r\n    color: \"#F60D09\",\r\n    chainId: 3,\r\n    faucet: \"https://faucet.ropsten.be/\",\r\n    blockExplorer: \"https://ropsten.etherscan.io/\",\r\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  xdai: {\r\n    name: \"xdai\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://dai.poa.network\",\r\n    faucet: \"https://xdai-faucet.top/\",\r\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\r\n  },\r\n  matic: {\r\n    name: \"matic\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\r\n  },\r\n  localArbitrum: {\r\n    name: \"localArbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 153869338190755,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:8547`,\r\n  },\r\n  localArbitrumL1: {\r\n    name: \"localArbitrumL1\",\r\n    color: \"#50a0ea\",\r\n    chainId: 44010,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:7545`,\r\n  },\r\n  rinkebyArbitrum: {\r\n    name: \"Arbitrum Testnet\",\r\n    color: \"#50a0ea\",\r\n    chainId: 421611,\r\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\r\n  },\r\n  arbitrum: {\r\n    name: \"Arbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\r\n    gasPrice: 0,\r\n  },\r\n  localOptimismL1: {\r\n    name: \"localOptimismL1\",\r\n    color: \"#f01a37\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\r\n  },\r\n  localOptimism: {\r\n    name: \"localOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\r\n    gasPrice: 0,\r\n  },\r\n  kovanOptimism: {\r\n    name: \"kovanOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 69,\r\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\r\n    rpcUrl: `https://kovan.optimism.io`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n      \r\n      var options = null;\r\n      var notify = null;\r\n      if(navigator.onLine){\r\n        options = {\r\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n          system: \"ethereum\",\r\n          networkId: network.chainId,\r\n          // darkMode: Boolean, // (default: false)\r\n          transactionHandler: txInformation => {\r\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n            const possibleFunction = callbacks[txInformation.transaction.hash];\r\n            if (typeof possibleFunction === \"function\") {\r\n              possibleFunction(txInformation.transaction);\r\n            }\r\n          },\r\n        };  \r\n\r\n        notify = Notify(options);\r\n      }\r\n       \r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        console.log(e);\r\n        console.log(\"Transaction Error:\", e.message);\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: e.data ? e.data.message : e.reason ? e.reason : e.message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Badge, Input } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport Blockie from \"./Blockie\";\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n*/\r\n\r\nexport default function AddressInput(props) {\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const scannerButton = (\r\n    <div\r\n      style={{ marginTop: 4, cursor: \"pointer\" }}\r\n      onClick={() => {\r\n        setScan(!scan);\r\n      }}\r\n    >\r\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n        <QrcodeOutlined style={{ fontSize: 18 }} />\r\n      </Badge>{\" \"}\r\n      Scan\r\n    </div>\r\n  );\r\n\r\n  const { ensProvider, onChange } = props;\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  const scanner = scan ? (\r\n    <div\r\n      style={{\r\n        zIndex: 256,\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: 0,\r\n        width: \"100%\",\r\n      }}\r\n      onClick={() => {\r\n        setScan(false);\r\n      }}\r\n    >\r\n      <QrReader\r\n        delay={250}\r\n        resolution={1200}\r\n        onError={e => {\r\n          console.log(\"SCAN ERROR\", e);\r\n          setScan(false);\r\n        }}\r\n        onScan={newValue => {\r\n          if (newValue) {\r\n            console.log(\"SCAN VALUE\", newValue);\r\n            let possibleNewValue = newValue;\r\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n              console.log(\"CLEANED VALUE\", possibleNewValue);\r\n            }\r\n            setScan(false);\r\n            updateAddress(possibleNewValue);\r\n          }\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scanner}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ens || currentValue}\r\n        addonAfter={scannerButton}\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD 🔀\");\r\n  } else {\r\n    prefix = \"Ξ\";\r\n    addonAfter = option(\"ETH 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.signer ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n*/\r\n\r\nexport default function Account({\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n}) {\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {address ? (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\r\n      ) : (\r\n        \"Connecting...\"\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} />\r\n      <Wallet\r\n        address={address}\r\n        provider={localProvider}\r\n        signer={userSigner}\r\n        ensProvider={mainnetProvider}\r\n        price={price}\r\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n      />\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n*/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Address } from \"..\";\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = thing => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return <Address address={thing} fontSize={22} />;\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nexport default tryToDisplay;\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <a href=\"#\" onClick={refresh}>\r\n              🔄\r\n            </a>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  let inputIndex = 0;\r\n  const inputs = functionInfo.inputs.map(input => {\r\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              let innerIndex = 0;\r\n              const args = functionInfo.inputs.map(input => {\r\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                const returned = await contractFunction(...args);\r\n                result = tryToDisplay(returned);\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"../../hooks\";\r\nimport Account from \"../Account\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n  chainId,\r\n}) {\r\n  const contracts = useContractLoader(provider, { chainId });\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(\r\n    () =>\r\n      contract\r\n        ? Object.values(contract.interface.functions).filter(\r\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\r\n          )\r\n        : [],\r\n    [contract, show],\r\n  );\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(fn => {\r\n    if (isQueryable(fn)) {\r\n      // If there are no inputs, just display return value\r\n      return (\r\n        <DisplayVariable\r\n          key={fn.name}\r\n          contractFunction={contract[fn.name]}\r\n          functionInfo={fn}\r\n          refreshRequired={refreshRequired}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    // If there are inputs, display a form to allow users to provide these\r\n    return (\r\n      <FunctionForm\r\n        key={\"FF\" + fn.name}\r\n        contractFunction={\r\n          fn.stateMutability === \"view\" || fn.stateMutability === \"pure\"\r\n            ? contract[fn.name]\r\n            : contract.connect(signer)[fn.name]\r\n        }\r\n        functionInfo={fn}\r\n        provider={provider}\r\n        gasPrice={gasPrice}\r\n        triggerRefresh={triggerRefresh}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { SendOutlined } from \"@ant-design/icons\";\r\nimport { Button, Input, Tooltip } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks\";\r\nimport React, { useCallback, useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/\r\n\r\nexport default function Faucet(props) {\r\n\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (props.localProvider) {\r\n        const _faucetAddress = await props.localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n        console.log(_faucetAddress);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [props.localProvider]);\r\n\r\n  const [address, setAddress] = useState();\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await props.ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setAddress(address);\r\n      }\r\n    },\r\n    [props.ensProvider, props.onChange],\r\n  );\r\n\r\n  const tx = Transactor(props.localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        // value={address}\r\n        value={ens || address}\r\n        onChange={e => {\r\n          // setAddress(e.target.value);\r\n          updateAddress(e.target.value);\r\n        }}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={props.localProvider}\r\n              ensProvider={props.ensProvider}\r\n              price={props.price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// added display of 0 instead of NaN if gas price is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays gas gauge\r\n\r\n  ~ How can I use? ~\r\n\r\n  <GasGauge\r\n    gasPrice={gasPrice}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide gasPrice={gasPrice} and get current gas gauge\r\n*/\r\n\r\nexport default function GasGauge(props) {\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        window.open(\"https://ethgasstation.info/\");\r\n      }}\r\n      size=\"large\"\r\n      shape=\"round\"\r\n    >\r\n      <span style={{ marginRight: 8 }}>\r\n        <span role=\"img\" aria-label=\"fuelpump\">\r\n          ⛽️\r\n        </span>\r\n      </span>\r\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\r\n    </Button>\r\n  );\r\n}\r\n","import { PageHeader } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// displays a page header\r\n\r\nexport default function Header() {\r\n  return (\r\n    <a href=\"https://github.com/austintgriffith/scaffold-eth\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <PageHeader\r\n        title=\"🏗 scaffold-eth\"\r\n        subTitle=\"🖼 NFT example\"\r\n        style={{ cursor: \"pointer\" }}\r\n      />\r\n    </a>\r\n  );\r\n}\r\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\r\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\r\nimport { Button, Divider, Modal } from \"antd\";\r\nimport React, { useState } from \"react\";\r\n\r\n// added display of 0 if price={price} is not provided\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\r\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Ramp\r\n    price={price}\r\n    address={address}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Ramp opens directly in the application, component uses RampInstantSDK\r\n  - Provide price={price} and current ETH price will be displayed\r\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\r\n*/\r\n\r\nexport default function Ramp(props) {\r\n  const [modalUp, setModalUp] = useState(\"down\");\r\n\r\n  const type = \"default\";\r\n\r\n  const allFaucets = [];\r\n  for (const n in props.networks) {\r\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\r\n      allFaucets.push(\r\n        <p key={props.networks[n].chainId}>\r\n          <Button\r\n            style={{ color: props.networks[n].color }}\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(props.networks[n].faucet);\r\n            }}\r\n          >\r\n            {props.networks[n].name}\r\n          </Button>\r\n        </p>,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"large\"\r\n        shape=\"round\"\r\n        onClick={() => {\r\n          setModalUp(\"up\");\r\n        }}\r\n      >\r\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\r\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\r\n      </Button>\r\n      <Modal\r\n        title=\"Buy ETH\"\r\n        visible={modalUp === \"up\"}\r\n        onCancel={() => {\r\n          setModalUp(\"down\");\r\n        }}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              setModalUp(\"down\");\r\n            }}\r\n          >\r\n            cancel\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-us\">\r\n                🇺🇸\r\n              </span>\r\n            </span>\r\n            Wyre\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              new RampInstantSDK({\r\n                hostAppName: \"scaffold-eth\",\r\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\r\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\r\n                swapAsset: \"ETH\",\r\n                userAddress: props.address,\r\n              })\r\n                .on(\"*\", event => console.log(event))\r\n                .show();\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-gb\">\r\n                🇬🇧\r\n              </span>\r\n            </span>\r\n            Ramp\r\n          </Button>\r\n        </p>\r\n\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\r\n              🏦\r\n            </span>\r\n            Coinbase\r\n          </Button>\r\n        </p>\r\n\r\n        <Divider />\r\n\r\n        <h2>Testnet ETH</h2>\r\n\r\n        {allFaucets}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  console.log(\"no call of that name!\");\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n\r\n  const [tokens, setTokens] = useState();\r\n\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenList = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenList.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  // Avoid theme change flicker\r\n  // if (status === \"loading\") {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\n\r\nimport { utils, ethers } from \"ethers\";\r\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useContractLoader, useOnBlock } from \"../hooks\";\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/*\r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n*/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment, setEnvironment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { Alert, Button, Card, Col, Input, List, Menu, Row } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactJson from \"react-json-view\";\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\r\nimport Web3Modal from \"web3modal\";\r\nimport \"./App.css\";\r\nimport { Account, Address, AddressInput, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\r\nimport {INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\r\nimport { Transactor } from \"./helpers\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useEventListener,\r\n  useExchangePrice,\r\n  useGasPrice,\r\n  useOnBlock,\r\n  useUserSigner,\r\n} from \"./hooks\";\r\n\r\nconst { BufferList } = require(\"bl\");\r\n// https://www.npmjs.com/package/ipfs-http-client\r\nconst ipfsAPI = require(\"ipfs-http-client\");\r\nconst ipfs = ipfsAPI({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n/*\r\n    Welcome to 🏗 scaffold-eth !\r\n\r\n    Code:\r\n    https://github.com/austintgriffith/scaffold-eth\r\n\r\n    Support:\r\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\r\n    or DM @austingriffith on twitter or telegram\r\n\r\n    You should get your own Infura.io ID and put it in `constants.js`\r\n    (this is your connection to the main Ethereum network for ENS etc.)\r\n\r\n\r\n    🌏 EXTERNAL CONTRACTS:\r\n    You can also bring in contract artifacts in `constants.js`\r\n    (and then use the `useExternalContractLoader()` hook!)\r\n*/\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst targetNetwork = NETWORKS.mumbai; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = true;\r\nconst NETWORKCHECK = true;\r\n\r\n// EXAMPLE STARTING JSON:\r\nconst STARTING_JSON = {\r\n  description: \"It's actually a bison?\",\r\n  external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\r\n  image: \"https://austingriffith.com/images/paintings/buffalo.jpg\",\r\n  name: \"Buffalo\",\r\n  attributes: [\r\n    {\r\n      trait_type: \"BackgroundColor\",\r\n      value: \"green\",\r\n    },\r\n    {\r\n      trait_type: \"Eyes\",\r\n      value: \"googly\",\r\n    },\r\n  ],\r\n};\r\n\r\n// helper function to \"Get\" from IPFS\r\n// you usually go content.toString() after this...\r\nconst getFromIPFS = async hashToGet => {\r\n  for await (const file of ipfs.get(hashToGet)) {\r\n    console.log(file.path);\r\n    if (!file.content) continue;\r\n    const content = new BufferList();\r\n    for await (const chunk of file.content) {\r\n      content.append(chunk);\r\n    }\r\n    console.log(content);\r\n    return content;\r\n  }\r\n};\r\n\r\n// 🛰 providers\r\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\r\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\r\n//\r\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\r\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\r\nconst scaffoldEthProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\") : null;\r\nconst mainnetInfura = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID) : null;\r\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I\r\n\r\n// 🏠 Your local provider is usually pointed at your local blockchain\r\nconst localProviderUrl = targetNetwork.rpcUrl;\r\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\r\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\r\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\r\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\r\n\r\n// 🔭 block explorer URL\r\nconst blockExplorer = targetNetwork.blockExplorer;\r\n\r\n/*\r\n  Web3 modal helps us \"connect\" external wallets:\r\n*/\r\nconst web3Modal = new Web3Modal({\r\n  // network: \"mainnet\", // optional\r\n  cacheProvider: true, // optional\r\n  providerOptions: {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        infuraId: INFURA_ID,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst logoutOfWeb3Modal = async () => {\r\n  await web3Modal.clearCachedProvider();\r\n  setTimeout(() => {\r\n    window.location.reload();\r\n  }, 1);\r\n};\r\n\r\nfunction App(props) {\r\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userSigner = useUserSigner(injectedProvider, localProvider);\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider);\r\n\r\n  // If you want to call a function on a new block\r\n  useOnBlock(mainnetProvider, () => {\r\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\r\n  });\r\n\r\n  // Then read your DAI balance like:\r\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\r\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\r\n  ]);\r\n\r\n  // keep track of a variable from the contract in the local React state:\r\n  const balance = useContractReader(readContracts, \"YourCollectible\", \"balanceOf\", [address]);\r\n  console.log(\"🤗 balance:\", balance);\r\n\r\n  // 📟 Listen for broadcast events\r\n  const transferEvents = useEventListener(readContracts, \"YourCollectible\", \"Transfer\", localProvider, 1);\r\n  console.log(\"📟 Transfer events:\", transferEvents);\r\n\r\n  //\r\n  // 🧠 This effect will update yourCollectibles by polling when your balance changes\r\n  //\r\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\r\n  const [yourCollectibles, setYourCollectibles] = useState();\r\n\r\n  useEffect(() => {\r\n    const updateYourCollectibles = async () => {\r\n      const collectibleUpdate = [];\r\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\r\n        try {\r\n          console.log(\"GEtting token index\", tokenIndex);\r\n          const tokenId = await readContracts.YourCollectible.tokenOfOwnerByIndex(address, tokenIndex);\r\n          console.log(\"tokenId\", tokenId);\r\n          const tokenURI = await readContracts.YourCollectible.tokenURI(tokenId);\r\n          console.log(\"tokenURI\", tokenURI);\r\n\r\n          const ipfsHash = tokenURI.replace(\"https://ipfs.io/ipfs/\", \"\");\r\n          console.log(\"ipfsHash\", ipfsHash);\r\n\r\n          const jsonManifestBuffer = await getFromIPFS(ipfsHash);\r\n\r\n          try {\r\n            const jsonManifest = JSON.parse(jsonManifestBuffer.toString());\r\n            console.log(\"jsonManifest\", jsonManifest);\r\n            collectibleUpdate.push({ id: tokenId, uri: tokenURI, owner: address, ...jsonManifest });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n      setYourCollectibles(collectibleUpdate);\r\n    };\r\n    updateYourCollectibles();\r\n  }, [address, yourBalance]);\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\r\n  */\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\r\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\r\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n  ]);\r\n\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\r\n                    if (tx) {\r\n                      console.log(tx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>.\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const [route, setRoute] = useState();\r\n  useEffect(() => {\r\n    setRoute(window.location.pathname);\r\n  }, [setRoute]);\r\n\r\n  let faucetHint = \"\";\r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\r\n\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId == 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ padding: 16 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\"0.01\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const [yourJSON, setYourJSON] = useState(STARTING_JSON);\r\n  const [sending, setSending] = useState();\r\n  const [ipfsHash, setIpfsHash] = useState();\r\n  const [ipfsDownHash, setIpfsDownHash] = useState();\r\n\r\n  const [downloading, setDownloading] = useState();\r\n  const [ipfsContent, setIpfsContent] = useState();\r\n\r\n  const [transferToAddresses, setTransferToAddresses] = useState({});\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header />\r\n      {networkDisplay}\r\n      <BrowserRouter>\r\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\r\n          <Menu.Item key=\"/\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/\");\r\n              }}\r\n              to=\"/\"\r\n            >\r\n              YourCollectibles\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/transfers\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/transfers\");\r\n              }}\r\n              to=\"/transfers\"\r\n            >\r\n              Transfers\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/ipfsup\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/ipfsup\");\r\n              }}\r\n              to=\"/ipfsup\"\r\n            >\r\n              IPFS Upload\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/ipfsdown\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/ipfsdown\");\r\n              }}\r\n              to=\"/ipfsdown\"\r\n            >\r\n              IPFS Download\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/debugcontracts\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/debugcontracts\");\r\n              }}\r\n              to=\"/debugcontracts\"\r\n            >\r\n              Debug Contracts\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            {/*\r\n                🎛 this scaffolding is full of commonly used components\r\n                this <Contract/> component will automatically parse your ABI\r\n                and give you a form to interact with it locally\r\n            */}\r\n            <div style={{ width: 640, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n              <List\r\n                bordered\r\n                dataSource={yourCollectibles}\r\n                renderItem={item => {\r\n                  const id = item.id.toNumber();\r\n                  return (\r\n                    <List.Item key={id + \"_\" + item.uri + \"_\" + item.owner}>\r\n                      <Card\r\n                        title={\r\n                          <div>\r\n                            <span style={{ fontSize: 16, marginRight: 8 }}>#{id}</span> {item.name}\r\n                          </div>\r\n                        }\r\n                      >\r\n                        <div>\r\n                          <img src={item.image} style={{ maxWidth: 150 }} />\r\n                        </div>\r\n                        <div>{item.description}</div>\r\n                      </Card>\r\n\r\n                      <div>\r\n                        owner:{\" \"}\r\n                        <Address\r\n                          address={item.owner}\r\n                          ensProvider={mainnetProvider}\r\n                          blockExplorer={blockExplorer}\r\n                          fontSize={16}\r\n                        />\r\n                        <AddressInput\r\n                          ensProvider={mainnetProvider}\r\n                          placeholder=\"transfer to address\"\r\n                          value={transferToAddresses[id]}\r\n                          onChange={newValue => {\r\n                            const update = {};\r\n                            update[id] = newValue;\r\n                            setTransferToAddresses({ ...transferToAddresses, ...update });\r\n                          }}\r\n                        />\r\n                        <Button\r\n                          onClick={() => {\r\n                            console.log(\"writeContracts\", writeContracts);\r\n                            tx(writeContracts.YourCollectible.transferFrom(address, transferToAddresses[id], id));\r\n                          }}\r\n                        >\r\n                          Transfer\r\n                        </Button>\r\n                      </div>\r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </Route>\r\n\r\n          <Route path=\"/transfers\">\r\n            <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n              <List\r\n                bordered\r\n                dataSource={transferEvents}\r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item[0] + \"_\" + item[1] + \"_\" + item.blockNumber + \"_\" + item[2].toNumber()}>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}>#{item[2].toNumber()}</span>\r\n                      <Address address={item[0]} ensProvider={mainnetProvider} fontSize={16} /> =&gt;\r\n                      <Address address={item[1]} ensProvider={mainnetProvider} fontSize={16} />\r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </Route>\r\n\r\n          <Route path=\"/ipfsup\">\r\n            <div style={{ paddingTop: 32, width: 740, margin: \"auto\", textAlign: \"left\" }}>\r\n              <ReactJson\r\n                style={{ padding: 8 }}\r\n                src={yourJSON}\r\n                theme=\"pop\"\r\n                enableClipboard={false}\r\n                onEdit={(edit, a) => {\r\n                  setYourJSON(edit.updated_src);\r\n                }}\r\n                onAdd={(add, a) => {\r\n                  setYourJSON(add.updated_src);\r\n                }}\r\n                onDelete={(del, a) => {\r\n                  setYourJSON(del.updated_src);\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <Button\r\n              style={{ margin: 8 }}\r\n              loading={sending}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n              type=\"primary\"\r\n              onClick={async () => {\r\n                console.log(\"UPLOADING...\", yourJSON);\r\n                setSending(true);\r\n                setIpfsHash();\r\n                const result = await ipfs.add(JSON.stringify(yourJSON)); // addToIPFS(JSON.stringify(yourJSON))\r\n                if (result && result.path) {\r\n                  setIpfsHash(result.path);\r\n                }\r\n                setSending(false);\r\n                console.log(\"RESULT:\", result);\r\n              }}\r\n            >\r\n              Upload to IPFS\r\n            </Button>\r\n\r\n            <div style={{ padding: 16, paddingBottom: 150 }}>{ipfsHash}</div>\r\n          </Route>\r\n          <Route path=\"/ipfsdown\">\r\n            <div style={{ paddingTop: 32, width: 740, margin: \"auto\" }}>\r\n              <Input\r\n                value={ipfsDownHash}\r\n                placeHolder=\"IPFS hash (like QmadqNw8zkdrrwdtPFK1pLi8PPxmkQ4pDJXY8ozHtz6tZq)\"\r\n                onChange={e => {\r\n                  setIpfsDownHash(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n            <Button\r\n              style={{ margin: 8 }}\r\n              loading={sending}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n              type=\"primary\"\r\n              onClick={async () => {\r\n                console.log(\"DOWNLOADING...\", ipfsDownHash);\r\n                setDownloading(true);\r\n                setIpfsContent();\r\n                const result = await getFromIPFS(ipfsDownHash); // addToIPFS(JSON.stringify(yourJSON))\r\n                if (result && result.toString) {\r\n                  setIpfsContent(result.toString());\r\n                }\r\n                setDownloading(false);\r\n              }}\r\n            >\r\n              Download from IPFS\r\n            </Button>\r\n\r\n            <pre style={{ padding: 16, width: 500, margin: \"auto\", paddingBottom: 150 }}>{ipfsContent}</pre>\r\n          </Route>\r\n          <Route path=\"/debugcontracts\">\r\n            <Contract\r\n              name=\"YourCollectible\"\r\n              signer={userSigner}\r\n              provider={localProvider}\r\n              address={address}\r\n              blockExplorer={blockExplorer}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\r\n        <Account\r\n          address={address}\r\n          localProvider={localProvider}\r\n          userSigner={userSigner}\r\n          mainnetProvider={mainnetProvider}\r\n          price={price}\r\n          web3Modal={web3Modal}\r\n          loadWeb3Modal={loadWeb3Modal}\r\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n          blockExplorer={blockExplorer}\r\n        />\r\n        {faucetHint}\r\n      </div>\r\n\r\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\r\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={8}>\r\n            <Ramp price={price} address={address} networks={NETWORKS} />\r\n          </Col>\r\n\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\r\n            <GasGauge gasPrice={gasPrice} />\r\n          </Col>\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\r\n            <Button\r\n              onClick={() => {\r\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\r\n              }}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n            >\r\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\r\n                💬\r\n              </span>\r\n              Support\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={24}>\r\n            {\r\n              /*  if the local provider has a signer, let's show the faucet:  */\r\n              faucetAvailable ? (\r\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\r\n              ) : (\r\n                \"\"\r\n              )\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\r\nimport { usePoller } from \"eth-hooks\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\r\n  const [price, setPrice] = useState(0);\r\n\r\n  const pollPrice = () => {\r\n    async function getPrice() {\r\n      if(!mainnetProvider)\r\n        return 0;\r\n      if (targetNetwork.price) {\r\n        setPrice(targetNetwork.price);\r\n      } else {\r\n        const DAI = new Token(\r\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\r\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n          18,\r\n        );\r\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\r\n        const route = new Route([pair], WETH[DAI.chainId]);\r\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\r\n      }\r\n    }\r\n    getPrice();\r\n  };\r\n  usePoller(pollPrice, pollTime || 9777);\r\n\r\n  return price;\r\n}\r\n","import axios from \"axios\";\r\nimport { usePoller } from \"eth-hooks\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function useGasPrice(targetNetwork, speed) {\r\n  const [gasPrice, setGasPrice] = useState();\r\n  const loadGasPrice = async () => {\r\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\r\n      setGasPrice(targetNetwork.gasPrice);\r\n    } else {\r\n      if(navigator.onLine){\r\n        axios\r\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\r\n          .then(response => {\r\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\r\n            if (newGasPrice !== gasPrice) {\r\n              setGasPrice(newGasPrice);\r\n            }\r\n          })\r\n          .catch(error => console.log(error));\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(loadGasPrice, 39999);\r\n  return gasPrice;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to keep track of events\r\n\r\n  ~ How can I use? ~\r\n\r\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\r\n  - Specify the provider\r\n*/\r\n\r\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\r\n  const [updates, setUpdates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\r\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\r\n      provider.resetEventsBlock(startBlock);\r\n    }\r\n    if (contracts && contractName && contracts[contractName]) {\r\n      try {\r\n        contracts[contractName].on(eventName, (...args) => {\r\n          const blockNumber = args[args.length - 1].blockNumber;\r\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\r\n        });\r\n        return () => {\r\n          contracts[contractName].removeListener(eventName);\r\n        };\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [provider, startBlock, contracts, contractName, eventName]);\r\n\r\n  return updates;\r\n}\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <App subgraphUri={subgraphUri} />\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","const ERC20ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        name: \"balance\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"fallback\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n];\r\nconst DAIABI = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"chainId_\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: true,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes4\",\r\n        name: \"sig\",\r\n        type: \"bytes4\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg1\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg2\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"bytes\",\r\n        name: \"data\",\r\n        type: \"bytes\",\r\n      },\r\n    ],\r\n    name: \"LogNote\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"deny\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"move\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"nonces\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"holder\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"nonce\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"expiry\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"allowed\",\r\n        type: \"bool\",\r\n      },\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"v\",\r\n        type: \"uint8\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"r\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"s\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"pull\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"push\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"rely\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"wards\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\r\nmodule.exports = {\r\n  1: {\r\n    contracts: {\r\n      DAI: {\r\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n        abi: DAIABI,\r\n      },\r\n      UNI: {\r\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n        abi: ERC20ABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n"],"sourceRoot":""}