{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _objectSpread from\"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";/* eslint-disable import/no-dynamic-require */ /* eslint-disable global-require */import{useEffect,useState}from\"react\";var _require=require(\"ethers\"),ethers=_require.ethers;/*\r\n  ~ What it does? ~\r\n\r\n  Loads your local contracts and gives options to read values from contracts\r\n  or write transactions into them\r\n\r\n  ~ How can I use? ~\r\n\r\n  const readContracts = useContractLoader(localProvider) // or\r\n  const writeContracts = useContractLoader(userProvider)\r\n\r\n  ~ Features ~\r\n\r\n  - localProvider enables reading values from contracts\r\n  - userProvider enables writing transactions into contracts\r\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\r\n    and using ContractReader.js hook:\r\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\r\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\r\n\r\n  config can include:\r\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\r\n  - hardhatNetworkName - to hardcode the hardhat network of interest\r\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\r\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\r\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\r\n*/export default function useContractLoader(providerOrSigner){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _useState=useState(),_useState2=_slicedToArray(_useState,2),contracts=_useState2[0],setContracts=_useState2[1];useEffect(function(){var active=true;function loadContracts(){return _loadContracts.apply(this,arguments);}function _loadContracts(){_loadContracts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var signer,provider,accounts,providerNetwork,_chainId,contractList,externalContractList,combinedContracts,hardhatNetwork,newContracts;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(providerOrSigner&&typeof providerOrSigner!==\"undefined\")){_context.next=26;break;}console.log(\"loading contracts\");_context.prev=2;if(!(providerOrSigner&&typeof providerOrSigner.listAccounts===\"function\")){_context.next=7;break;}_context.next=6;return providerOrSigner.listAccounts();case 6:accounts=_context.sent;case 7:if(ethers.Signer.isSigner(providerOrSigner)){signer=providerOrSigner;provider=signer.provider;}else if(accounts&&accounts.length>0){signer=providerOrSigner.getSigner();provider=providerOrSigner;}else{signer=providerOrSigner;provider=providerOrSigner;}_context.next=10;return provider.getNetwork();case 10:providerNetwork=_context.sent;_chainId=config.chainId||providerNetwork.chainId;contractList={};externalContractList={};try{contractList=config.hardhatContracts||require(\"../contracts/hardhat_contracts.json\");}catch(e){console.log(e);}try{externalContractList=config.externalContracts||require(\"../contracts/external_contracts.js\");}catch(e){console.log(e);}combinedContracts={};if(contractList[_chainId]){for(hardhatNetwork in contractList[_chainId]){if(Object.prototype.hasOwnProperty.call(contractList[_chainId],hardhatNetwork)){if(!config.hardhatNetworkName||hardhatNetwork===config.hardhatNetworkName){combinedContracts=_objectSpread(_objectSpread({},combinedContracts),contractList[_chainId][hardhatNetwork].contracts);}}}}if(externalContractList[_chainId]){combinedContracts=_objectSpread(_objectSpread({},combinedContracts),externalContractList[_chainId].contracts);}newContracts=Object.keys(combinedContracts).reduce(function(accumulator,contractName){var _address=config.customAddresses&&Object.keys(config.customAddresses).includes(contractName)?config.customAddresses[contractName]:combinedContracts[contractName].address;accumulator[contractName]=new ethers.Contract(_address,combinedContracts[contractName].abi,signer);return accumulator;},{});if(active)setContracts(newContracts);_context.next=26;break;case 23:_context.prev=23;_context.t0=_context[\"catch\"](2);console.log(\"ERROR LOADING CONTRACTS!!\",_context.t0);case 26:case\"end\":return _context.stop();}}},_callee,null,[[2,23]]);}));return _loadContracts.apply(this,arguments);}loadContracts();return function(){active=false;};},[providerOrSigner,config.chainId,config.hardhatNetworkName]);return contracts;}","map":{"version":3,"sources":["C:/Users/hndls/matic-nft-tutorial/packages/react-app/src/hooks/ContractLoader.js"],"names":["useEffect","useState","require","ethers","useContractLoader","providerOrSigner","config","contracts","setContracts","active","loadContracts","console","log","listAccounts","accounts","Signer","isSigner","signer","provider","length","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","Object","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","keys","reduce","accumulator","contractName","_address","customAddresses","includes","address","Contract","abi"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-dynamic-require */\r\n/* eslint-disable global-require */\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Loads your local contracts and gives options to read values from contracts\r\n  or write transactions into them\r\n\r\n  ~ How can I use? ~\r\n\r\n  const readContracts = useContractLoader(localProvider) // or\r\n  const writeContracts = useContractLoader(userProvider)\r\n\r\n  ~ Features ~\r\n\r\n  - localProvider enables reading values from contracts\r\n  - userProvider enables writing transactions into contracts\r\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\r\n    and using ContractReader.js hook:\r\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\r\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\r\n\r\n  config can include:\r\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\r\n  - hardhatNetworkName - to hardcode the hardhat network of interest\r\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\r\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\r\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\r\n*/\r\n\r\nexport default function useContractLoader(providerOrSigner, config = {}) {\r\n  const [contracts, setContracts] = useState();\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    async function loadContracts() {\r\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\r\n        console.log(`loading contracts`);\r\n        try {\r\n          // we need to check to see if this providerOrSigner has a signer or not\r\n          let signer;\r\n          let provider;\r\n          let accounts;\r\n\r\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\r\n            accounts = await providerOrSigner.listAccounts();\r\n          }\r\n\r\n          if (ethers.Signer.isSigner(providerOrSigner)) {\r\n            signer = providerOrSigner;\r\n            provider = signer.provider;\r\n          } else if (accounts && accounts.length > 0) {\r\n            signer = providerOrSigner.getSigner();\r\n            provider = providerOrSigner;\r\n          } else {\r\n            signer = providerOrSigner;\r\n            provider = providerOrSigner;\r\n          }\r\n\r\n          const providerNetwork = await provider.getNetwork();\r\n\r\n          const _chainId = config.chainId || providerNetwork.chainId;\r\n\r\n          let contractList = {};\r\n          let externalContractList = {};\r\n          try {\r\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n          try {\r\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n\r\n          let combinedContracts = {};\r\n\r\n          if (contractList[_chainId]) {\r\n            for (const hardhatNetwork in contractList[_chainId]) {\r\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\r\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\r\n                  combinedContracts = {\r\n                    ...combinedContracts,\r\n                    ...contractList[_chainId][hardhatNetwork].contracts,\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (externalContractList[_chainId]) {\r\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\r\n          }\r\n\r\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\r\n            const _address =\r\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\r\n                ? config.customAddresses[contractName]\r\n                : combinedContracts[contractName].address;\r\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\r\n            return accumulator;\r\n          }, {});\r\n          if (active) setContracts(newContracts);\r\n        } catch (e) {\r\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\r\n        }\r\n      }\r\n    }\r\n    loadContracts();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName]);\r\n\r\n  return contracts;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}