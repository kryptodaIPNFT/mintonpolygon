{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\packages\\\\react-app\\\\src\\\\components\\\\Contract\\\\FunctionForm.jsx\";\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst {\n  utils,\n  BigNumber\n} = require(\"ethers\");\n\nexport default function FunctionForm({\n  contractFunction,\n  functionInfo,\n  provider,\n  gasPrice,\n  triggerRefresh\n}) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n  const tx = Transactor(provider, gasPrice);\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n    let buttons = \"\";\n\n    if (input.type === \"bytes32\") {\n      buttons = /*#__PURE__*/React.createElement(Tooltip, {\n        placement: \"right\",\n        title: \"to bytes32\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        type: \"dashed\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: async () => {\n          if (utils.isHexString(form[key])) {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.parseBytes32String(form[key]);\n            setForm(formUpdate);\n          } else {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.formatBytes32String(form[key]);\n            setForm(formUpdate);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      }, \"#\\uFE0F\\u20E3\"));\n    } else if (input.type === \"bytes\") {\n      buttons = /*#__PURE__*/React.createElement(Tooltip, {\n        placement: \"right\",\n        title: \"to hex\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        type: \"dashed\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: async () => {\n          if (utils.isHexString(form[key])) {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.toUtf8String(form[key]);\n            setForm(formUpdate);\n          } else {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n            setForm(formUpdate);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }, \"#\\uFE0F\\u20E3\"));\n    } else if (input.type === \"uint256\") {\n      buttons = /*#__PURE__*/React.createElement(Tooltip, {\n        placement: \"right\",\n        title: \"* 10 ** 18\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        type: \"dashed\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: async () => {\n          const formUpdate = { ...form\n          };\n          formUpdate[key] = utils.parseEther(form[key]);\n          setForm(formUpdate);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }, \"\\u2734\\uFE0F\"));\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = /*#__PURE__*/React.createElement(Tooltip, {\n          placement: \"right\",\n          title: \"blockie\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Blockies, {\n          seed: possibleAddress,\n          scale: 3,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }\n        }));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 2\n      },\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      size: \"large\",\n      placeholder: input.name ? input.type + \" \" + input.name : input.type,\n      autoComplete: \"off\",\n      value: form[key],\n      name: key,\n      onChange: event => {\n        const formUpdate = { ...form\n        };\n        formUpdate[event.target.name] = event.target.value;\n        setForm(formUpdate);\n      },\n      suffix: buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }));\n  });\n  const txValueInput = /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: 2\n    },\n    key: \"txValueInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"transaction value\",\n    onChange: e => setTxValue(e.target.value),\n    value: txValue,\n    addonAfter: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"right\",\n      title: \" * 10^18 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      type: \"dashed\",\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: async () => {\n        const floatValue = parseFloat(txValue);\n        if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }, \"\\u2733\\uFE0F\"))), /*#__PURE__*/React.createElement(Col, {\n      span: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"right\",\n      title: \"number to hex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      type: \"dashed\",\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: async () => {\n        setTxValue(BigNumber.from(txValue).toHexString());\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, \"#\\uFE0F\\u20E3\"))))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }));\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon = functionInfo.type === \"call\" ? /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginLeft: -32\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, \"Read\\uD83D\\uDCE1\") : /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginLeft: -32\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"Send\\uD83D\\uDCB8\");\n  inputs.push( /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      cursor: \"pointer\",\n      margin: 2\n    },\n    key: \"goButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setReturnValue(e.target.value),\n    defaultValue: \"\",\n    bordered: false,\n    disabled: true,\n    value: returnValue,\n    suffix: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 50,\n        height: 30,\n        margin: 0\n      },\n      type: \"default\",\n      onClick: async () => {\n        let innerIndex = 0;\n        const args = functionInfo.inputs.map(input => {\n          const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n          let value = form[key];\n\n          if (input.baseType === \"array\") {\n            value = JSON.parse(value);\n          } else if (input.type === \"bool\") {\n            if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n              value = 1;\n            } else {\n              value = 0;\n            }\n          }\n\n          return value;\n        });\n        let result;\n\n        if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n          const returned = await contractFunction(...args);\n          result = tryToDisplay(returned);\n        } else {\n          const overrides = {};\n\n          if (txValue) {\n            overrides.value = txValue; // ethers.utils.parseEther()\n          }\n\n          if (gasPrice) {\n            overrides.gasPrice = gasPrice;\n          } // Uncomment this if you want to skip the gas estimation for each transaction\n          // overrides.gasLimit = hexlify(1200000);\n          // console.log(\"Running with extras\",extras)\n\n\n          const returned = await tx(contractFunction(...args, overrides));\n          result = tryToDisplay(returned);\n        }\n\n        console.log(\"SETTING RESULT:\", result);\n        setReturnValue(result);\n        triggerRefresh(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, buttonIcon),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    style: {\n      textAlign: \"right\",\n      opacity: 0.333,\n      paddingRight: 6,\n      fontSize: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, functionInfo.name), /*#__PURE__*/React.createElement(Col, {\n    span: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, inputs)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/hndls/matic-nft-tutorial/packages/react-app/src/components/Contract/FunctionForm.jsx"],"names":["Button","Col","Divider","Input","Row","Tooltip","React","useState","Blockies","Transactor","tryToDisplay","utils","BigNumber","require","FunctionForm","contractFunction","functionInfo","provider","gasPrice","triggerRefresh","form","setForm","txValue","setTxValue","returnValue","setReturnValue","tx","inputIndex","inputs","map","input","key","name","type","buttons","cursor","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","hexlify","toUtf8Bytes","parseEther","possibleAddress","toLowerCase","trim","length","margin","event","target","value","txValueInput","e","floatValue","parseFloat","from","toHexString","payable","push","buttonIcon","marginLeft","width","height","innerIndex","args","baseType","JSON","parse","result","stateMutability","returned","overrides","console","log","textAlign","opacity","paddingRight","fontSize"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  let inputIndex = 0;\r\n  const inputs = functionInfo.inputs.map(input => {\r\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              let innerIndex = 0;\r\n              const args = functionInfo.inputs.map(input => {\r\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                const returned = await contractFunction(...args);\r\n                result = tryToDisplay(returned);\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}