{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\packages\\\\react-app\\\\src\\\\components\\\\Wallet.jsx\";\nimport { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\nconst {\n  Text,\n  Paragraph\n} = Typography;\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n\n    getAddress();\n  }, [props.signer]);\n  const selectedAddress = props.address || signerAddress;\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n  const providerSend = props.signer ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Wallet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WalletOutlined, {\n    onClick: () => {\n      setOpen(!open);\n    },\n    rotate: -90,\n    style: {\n      padding: 7,\n      color: props.color ? props.color : \"\",\n      cursor: \"pointer\",\n      fontSize: 28,\n      verticalAlign: \"middle\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  })) : \"\";\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n\n  if (qr) {\n    display = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      copyable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, selectedAddress)), /*#__PURE__*/React.createElement(QR, {\n      value: selectedAddress,\n      size: \"450\",\n      level: \"H\",\n      includeMargin: true,\n      renderAs: \"svg\",\n      imageSettings: {\n        excavate: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }));\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }), \" Hide\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(selectedAddress);\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }), \" Private Key\");\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }, \"*injected account*, private key unknown\"));\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push( /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          fontSize: 16,\n          padding: 2,\n          backgroundStyle: \"#89e789\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"/pk#\" + pk,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Address, {\n        minimized: true,\n        address: wallet.address,\n        ensProvider: props.ensProvider,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }), \" \", wallet.address.substr(0, 6))));\n\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n\n          if (!extraPkDisplayAdded[pastwallet.address]\n          /* && selectedAddress!=pastwallet.address */\n          ) {\n              extraPkDisplayAdded[pastwallet.address] = true;\n              extraPkDisplay.push( /*#__PURE__*/React.createElement(\"div\", {\n                style: {\n                  fontSize: 16\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 15\n                }\n              }, /*#__PURE__*/React.createElement(\"a\", {\n                href: \"/pk#\" + pastpk,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 17\n                }\n              }, /*#__PURE__*/React.createElement(Address, {\n                minimized: true,\n                address: pastwallet.address,\n                ensProvider: props.ensProvider,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 19\n                }\n              }), \" \", pastwallet.address.substr(0, 6))));\n            }\n        }\n      }\n\n      display = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }\n      }, \"Private Key:\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        copyable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }, pk)), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }\n      }, \"Point your camera phone at qr code to open in\", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://xdai.io/\" + pk,\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }\n      }, \"burner wallet\"), \":\"), /*#__PURE__*/React.createElement(QR, {\n        value: \"https://xdai.io/\" + pk,\n        size: \"450\",\n        level: \"H\",\n        includeMargin: true,\n        renderAs: \"svg\",\n        imageSettings: {\n          excavate: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Paragraph, {\n        style: {\n          fontSize: \"16\"\n        },\n        copyable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }\n      }, \"https://xdai.io/\" + pk), extraPkDisplay ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }\n      }, \"Known Private Keys:\"), extraPkDisplay, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => {\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n\n          if (currentPrivateKey) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n\n          const randomWallet = ethers.Wallet.createRandom();\n\n          const privateKey = randomWallet._signingKey().privateKey;\n\n          window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n          window.location.reload();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }\n      }, \"Generate\")) : \"\");\n    }\n\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"receive\",\n      onClick: () => {\n        setQr(selectedAddress);\n        setPK(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }), \" Receive\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(\"\");\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }), \" Hide\");\n  } else {\n    const inputStyle = {\n      padding: 10\n    };\n    display = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: inputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AddressInput, {\n      autoFocus: true,\n      ensProvider: props.ensProvider,\n      placeholder: \"to address\",\n      address: toAddress,\n      onChange: setToAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: inputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EtherInput, {\n      price: props.price,\n      value: amount,\n      onChange: value => {\n        setAmount(value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }\n    })));\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"receive\",\n      onClick: () => {\n        setQr(selectedAddress);\n        setPK(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    }), \" Receive\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(selectedAddress);\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }\n    }), \" Private Key\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }\n  }, providerSend, /*#__PURE__*/React.createElement(Modal, {\n    visible: open,\n    title: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }\n    }, selectedAddress ? /*#__PURE__*/React.createElement(Address, {\n      address: selectedAddress,\n      ensProvider: props.ensProvider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 32\n      }\n    }) : /*#__PURE__*/React.createElement(Spin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 104\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: \"right\",\n        paddingRight: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Balance, {\n      address: selectedAddress,\n      provider: props.provider,\n      dollarMultiplier: props.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }\n    }))),\n    onOk: () => {\n      setQr();\n      setPK();\n      setOpen(!open);\n    },\n    onCancel: () => {\n      setQr();\n      setPK();\n      setOpen(!open);\n    },\n    footer: [privateKeyButton, receiveButton, /*#__PURE__*/React.createElement(Button, {\n      key: \"submit\",\n      type: \"primary\",\n      disabled: !amount || !toAddress || qr,\n      loading: false,\n      onClick: () => {\n        const tx = Transactor(props.signer);\n        let value;\n\n        try {\n          value = ethers.utils.parseEther(\"\" + amount);\n        } catch (e) {\n          // failed to parseEther, try something else\n          value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n        }\n\n        tx({\n          to: toAddress,\n          value\n        });\n        setOpen(!open);\n        setQr();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SendOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }\n    }), \" Send\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }\n  }, display));\n}","map":{"version":3,"sources":["C:/Users/hndls/matic-nft-tutorial/packages/react-app/src/components/Wallet.jsx"],"names":["KeyOutlined","QrcodeOutlined","SendOutlined","WalletOutlined","Button","Modal","Spin","Tooltip","Typography","ethers","QR","React","useState","useEffect","Transactor","Address","AddressInput","Balance","EtherInput","Text","Paragraph","Wallet","props","signerAddress","setSignerAddress","getAddress","signer","newAddress","selectedAddress","address","open","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","padding","color","cursor","fontSize","verticalAlign","display","receiveButton","privateKeyButton","excavate","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","ensProvider","substr","key","indexOf","console","log","pastpk","pastwallet","currentPrivateKey","window","setItem","Date","now","randomWallet","createRandom","privateKey","_signingKey","location","reload","inputStyle","price","value","float","paddingRight","provider","tx","utils","parseEther","e","parseFloat","toFixed","to"],"mappings":"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","sourcesContent":["import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.signer ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}