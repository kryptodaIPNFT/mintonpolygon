{"ast":null,"code":"/* eslint-disable import/no-dynamic-require */\n\n/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst {\n  ethers\n} = require(\"ethers\");\n/*\r\n  ~ What it does? ~\r\n\r\n  Loads your local contracts and gives options to read values from contracts\r\n  or write transactions into them\r\n\r\n  ~ How can I use? ~\r\n\r\n  const readContracts = useContractLoader(localProvider) // or\r\n  const writeContracts = useContractLoader(userProvider)\r\n\r\n  ~ Features ~\r\n\r\n  - localProvider enables reading values from contracts\r\n  - userProvider enables writing transactions into contracts\r\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\r\n    and using ContractReader.js hook:\r\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\r\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\r\n\r\n  config can include:\r\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\r\n  - hardhatNetworkName - to hardcode the hardhat network of interest\r\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\r\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\r\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\r\n*/\n\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = { ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts,\n              ...externalContractList[_chainId].contracts\n            };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address = config.customAddresses && Object.keys(config.customAddresses).includes(contractName) ? config.customAddresses[contractName] : combinedContracts[contractName].address;\n\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n\n    loadContracts();\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName]);\n  return contracts;\n}","map":{"version":3,"sources":["C:/Users/hndls/matic-nft-tutorial/packages/react-app/src/hooks/ContractLoader.js"],"names":["useEffect","useState","ethers","require","useContractLoader","providerOrSigner","config","contracts","setContracts","active","loadContracts","console","log","signer","provider","accounts","listAccounts","Signer","isSigner","length","getSigner","providerNetwork","getNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","Object","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","keys","reduce","accumulator","contractName","_address","customAddresses","includes","address","Contract","abi"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-dynamic-require */\r\n/* eslint-disable global-require */\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Loads your local contracts and gives options to read values from contracts\r\n  or write transactions into them\r\n\r\n  ~ How can I use? ~\r\n\r\n  const readContracts = useContractLoader(localProvider) // or\r\n  const writeContracts = useContractLoader(userProvider)\r\n\r\n  ~ Features ~\r\n\r\n  - localProvider enables reading values from contracts\r\n  - userProvider enables writing transactions into contracts\r\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\r\n    and using ContractReader.js hook:\r\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\r\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\r\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\r\n\r\n  config can include:\r\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\r\n  - hardhatNetworkName - to hardcode the hardhat network of interest\r\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\r\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\r\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\r\n*/\r\n\r\nexport default function useContractLoader(providerOrSigner, config = {}) {\r\n  const [contracts, setContracts] = useState();\r\n  useEffect(() => {\r\n    let active = true;\r\n\r\n    async function loadContracts() {\r\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\r\n        console.log(`loading contracts`);\r\n        try {\r\n          // we need to check to see if this providerOrSigner has a signer or not\r\n          let signer;\r\n          let provider;\r\n          let accounts;\r\n\r\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\r\n            accounts = await providerOrSigner.listAccounts();\r\n          }\r\n\r\n          if (ethers.Signer.isSigner(providerOrSigner)) {\r\n            signer = providerOrSigner;\r\n            provider = signer.provider;\r\n          } else if (accounts && accounts.length > 0) {\r\n            signer = providerOrSigner.getSigner();\r\n            provider = providerOrSigner;\r\n          } else {\r\n            signer = providerOrSigner;\r\n            provider = providerOrSigner;\r\n          }\r\n\r\n          const providerNetwork = await provider.getNetwork();\r\n\r\n          const _chainId = config.chainId || providerNetwork.chainId;\r\n\r\n          let contractList = {};\r\n          let externalContractList = {};\r\n          try {\r\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n          try {\r\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n\r\n          let combinedContracts = {};\r\n\r\n          if (contractList[_chainId]) {\r\n            for (const hardhatNetwork in contractList[_chainId]) {\r\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\r\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\r\n                  combinedContracts = {\r\n                    ...combinedContracts,\r\n                    ...contractList[_chainId][hardhatNetwork].contracts,\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (externalContractList[_chainId]) {\r\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\r\n          }\r\n\r\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\r\n            const _address =\r\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\r\n                ? config.customAddresses[contractName]\r\n                : combinedContracts[contractName].address;\r\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\r\n            return accumulator;\r\n          }, {});\r\n          if (active) setContracts(newContracts);\r\n        } catch (e) {\r\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\r\n        }\r\n      }\r\n    }\r\n    loadContracts();\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName]);\r\n\r\n  return contracts;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}