{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\hndls\\\\matic-nft-tutorial\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{SendOutlined}from\"@ant-design/icons\";import{Button,Input,Tooltip}from\"antd\";import{useLookupAddress}from\"eth-hooks\";import React,{useCallback,useState,useEffect}from\"react\";import Blockies from\"react-blockies\";import{Transactor}from\"../helpers\";import Wallet from\"./Wallet\";var _require=require(\"ethers\"),utils=_require.utils;// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/export default function Faucet(props){var _useState=useState(),_useState2=_slicedToArray(_useState,2),faucetAddress=_useState2[0],setFaucetAddress=_useState2[1];useEffect(function(){var getFaucetAddress=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _faucetAddress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!props.localProvider){_context.next=6;break;}_context.next=3;return props.localProvider.listAccounts();case 3:_faucetAddress=_context.sent;setFaucetAddress(_faucetAddress[0]);console.log(_faucetAddress);case 6:case\"end\":return _context.stop();}}},_callee);}));return function getFaucetAddress(){return _ref.apply(this,arguments);};}();getFaucetAddress();},[props.localProvider]);var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),address=_useState4[0],setAddress=_useState4[1];var blockie;if(address&&typeof address.toLowerCase===\"function\"){blockie=/*#__PURE__*/React.createElement(Blockies,{seed:address.toLowerCase(),size:8,scale:4});}else{blockie=/*#__PURE__*/React.createElement(\"div\",null);}var ens=useLookupAddress(props.ensProvider,address);var updateAddress=useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newValue){var _address,possibleAddress;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(typeof newValue!==\"undefined\")){_context2.next=13;break;}_address=newValue;if(!(_address.indexOf(\".eth\")>0||_address.indexOf(\".xyz\")>0)){_context2.next=12;break;}_context2.prev=3;_context2.next=6;return props.ensProvider.resolveName(_address);case 6:possibleAddress=_context2.sent;if(possibleAddress){_address=possibleAddress;}// eslint-disable-next-line no-empty\n_context2.next=12;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](3);case 12:setAddress(_address);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[3,10]]);}));return function(_x){return _ref2.apply(this,arguments);};}(),[props.ensProvider,props.onChange]);var tx=Transactor(props.localProvider);return/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(Input,{size:\"large\",placeholder:props.placeholder?props.placeholder:\"local faucet\",prefix:blockie// value={address}\n,value:ens||address,onChange:function onChange(e){// setAddress(e.target.value);\nupdateAddress(e.target.value);},suffix:/*#__PURE__*/React.createElement(Tooltip,{title:\"Faucet: Send local ether to an address.\"},/*#__PURE__*/React.createElement(Button,{onClick:function onClick(){tx({to:address,value:utils.parseEther(\"0.01\")});setAddress(\"\");},shape:\"circle\",icon:/*#__PURE__*/React.createElement(SendOutlined,null)}),/*#__PURE__*/React.createElement(Wallet,{color:\"#888888\",provider:props.localProvider,ensProvider:props.ensProvider,price:props.price,address:faucetAddress}))}));}","map":{"version":3,"sources":["C:/Users/hndls/matic-nft-tutorial/packages/react-app/src/components/Faucet.jsx"],"names":["SendOutlined","Button","Input","Tooltip","useLookupAddress","React","useCallback","useState","useEffect","Blockies","Transactor","Wallet","require","utils","Faucet","props","faucetAddress","setFaucetAddress","getFaucetAddress","localProvider","listAccounts","_faucetAddress","console","log","address","setAddress","blockie","toLowerCase","ens","ensProvider","updateAddress","newValue","indexOf","resolveName","possibleAddress","onChange","tx","placeholder","e","target","value","to","parseEther","price"],"mappings":"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","sourcesContent":["import { SendOutlined } from \"@ant-design/icons\";\r\nimport { Button, Input, Tooltip } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks\";\r\nimport React, { useCallback, useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/\r\n\r\nexport default function Faucet(props) {\r\n\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (props.localProvider) {\r\n        const _faucetAddress = await props.localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n        console.log(_faucetAddress);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [props.localProvider]);\r\n\r\n  const [address, setAddress] = useState();\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await props.ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setAddress(address);\r\n      }\r\n    },\r\n    [props.ensProvider, props.onChange],\r\n  );\r\n\r\n  const tx = Transactor(props.localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        // value={address}\r\n        value={ens || address}\r\n        onChange={e => {\r\n          // setAddress(e.target.value);\r\n          updateAddress(e.target.value);\r\n        }}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={props.localProvider}\r\n              ensProvider={props.ensProvider}\r\n              price={props.price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}